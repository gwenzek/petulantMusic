import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;

/**
 * Created by guillaume on 21/05/14.
 */
public class PreviewWindow {
    private JButton loadButton;
    private JButton runButton;
    private JTextArea imageNameTextArea;
    private ImagePanel imagePanel;
    JPanel previewWindow;
    private JButton okButton;
    private JComboBox noteComboBox1;
    private JComboBox noteComboBox2;
    private JFormattedTextField fileNumberTextField;
    private JSpinner levelSpinner;
    private JComboBox typeComboBox;
    private JComboBox durationComboBox;
    private JCheckBox pointedCheckBox;
    private JLabel infoLabel;
    private JFileChooser imageChooser = new JFileChooser();

    String loadedImage;

    public PreviewWindow() {
        createUIComponents();
        loadButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                loadFile();
            }
        });
        okButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                int n = (Integer) fileNumberTextField.getValue();
                if (imagePanel.saveSelected("img_" + n, "" + n + ' ' + getDescription())) {
                    fileNumberTextField.setValue(Integer.parseInt(fileNumberTextField.getValue().toString()) + 1);
                }
            }
        });
    }

    final static int NOTE_INDEX = 0;
    final static int CLE_INDEX = 1;
    final static int SILENCE_INDEX = 2;
    final static int ANNOTATION_INDEX = 3;

    private String getDescription() {
        switch (typeComboBox.getSelectedIndex()) {
            case NOTE_INDEX:
                return typeComboBox.getSelectedItem().toString() + ';'
                        + noteComboBox1.getSelectedItem() + ';'
                        + levelSpinner.getValue() + ';'
                        + noteComboBox2.getSelectedItem() + ';'
                        + durationComboBox.getSelectedItem() + ';'
                        + (pointedCheckBox.isSelected() ? '*' : '_');
            case CLE_INDEX:
                return typeComboBox.getSelectedItem().toString() + ';'
                        + noteComboBox1.getSelectedItem()
                        + ";_;_;_;_";
            case SILENCE_INDEX:
                return typeComboBox.getSelectedItem().toString() + ';'
                        + "_;_;_;"
                        + durationComboBox.getSelectedItem() + ";_";
            case ANNOTATION_INDEX:
                return typeComboBox.getSelectedItem().toString() + ';'
                        + noteComboBox1.getSelectedItem() + ';'
                        + levelSpinner.getValue() + ';'
                        + noteComboBox2.getSelectedItem() + ";_;_";
            default:
                return null;
        }
    }


    private void loadFile() {
        this.imageChooser.showOpenDialog(this.loadButton);
        File imageFile = this.imageChooser.getSelectedFile();
        if (imageFile != null) {
            imageNameTextArea.setText(imageFile.getName());
            imagePanel.load(imageFile);
        }
    }

    public static void main(String[] args) {
        JFrame frame = new JFrame("PreviewWindow");
        PreviewWindow preview = new PreviewWindow();
        preview.$$$setupUI$$$();
        frame.setContentPane(preview.previewWindow);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
    }

    private void createUIComponents() {
        System.out.println("custom creation " + this.toString());
        imagePanel.addInfoLabel(infoLabel);
        fileNumberTextField.setValue(new Integer(1));
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        previewWindow = new JPanel();
        previewWindow.setLayout(new GridLayoutManager(4, 1, new Insets(0, 0, 0, 0), -1, -1));
        previewWindow.setMinimumSize(new Dimension(250, 250));
        final JToolBar toolBar1 = new JToolBar();
        previewWindow.add(toolBar1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(-1, 20), null, 0, false));
        imageNameTextArea = new JTextArea();
        toolBar1.add(imageNameTextArea);
        loadButton = new JButton();
        loadButton.setText("Load");
        toolBar1.add(loadButton);
        runButton = new JButton();
        runButton.setText("Run");
        toolBar1.add(runButton);
        imagePanel = new ImagePanel();
        previewWindow.add(imagePanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JToolBar toolBar2 = new JToolBar();
        previewWindow.add(toolBar2, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(-1, 20), null, 0, false));
        typeComboBox = new JComboBox();
        toolBar2.add(typeComboBox);
        noteComboBox1 = new JComboBox();
        toolBar2.add(noteComboBox1);
        levelSpinner = new JSpinner();
        toolBar2.add(levelSpinner);
        noteComboBox2 = new JComboBox();
        noteComboBox2.setMaximumSize(new Dimension(150, 500));
        toolBar2.add(noteComboBox2);
        durationComboBox = new JComboBox();
        durationComboBox.setEnabled(true);
        toolBar2.add(durationComboBox);
        pointedCheckBox = new JCheckBox();
        pointedCheckBox.setText("pointee");
        toolBar2.add(pointedCheckBox);
        fileNumberTextField = new JFormattedTextField();
        fileNumberTextField.setHorizontalAlignment(4);
        fileNumberTextField.setMaximumSize(new Dimension(500, 2147483647));
        fileNumberTextField.setMinimumSize(new Dimension(150, 19));
        fileNumberTextField.setText("file number");
        fileNumberTextField.setToolTipText("file number");
        toolBar2.add(fileNumberTextField);
        okButton = new JButton();
        okButton.setText("Ok");
        toolBar2.add(okButton);
        infoLabel = new JLabel();
        infoLabel.setText("Label");
        previewWindow.add(infoLabel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return previewWindow;
    }
}


